---
- name: Desinstalar Zabbix en Linux (con búsqueda y limpieza de carpetas)
  hosts: linux
  gather_facts: true
  become: true

  vars:
    zabbix_pkg_candidates:
      - zabbix-agent
      - zabbix-agent2
    zabbix_common_paths:
      - /etc
      - /var
      - /usr/local
      - /opt
      - /home

  tasks:
    - name: Detener servicios Zabbix (si existen)
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
      loop:
        - zabbix-agent
        - zabbix-agent2
      ignore_errors: true

    # Para distros que NO sean SUSE usamos 'package' genérico
    - name: Desinstalar paquetes Zabbix (no-SUSE)
      ansible.builtin.package:
        name: "{{ zabbix_pkg_candidates }}"
        state: absent
      when: ansible_facts.os_family != "Suse"
      ignore_errors: true

    # Para SUSE usamos zypper directo (evita depender de colecciones)
    - name: Desinstalar Zabbix en SUSE con zypper
      ansible.builtin.command: >
        zypper --non-interactive remove -y zabbix-agent zabbix-agent2
      when: ansible_facts.os_family == "Suse"
      register: zypper_remove
      changed_when: >
        (zypper_remove.rc == 0) and
        ("Nothing to do" not in (zypper_remove.stdout | default(""))) and
        ("not found" not in (zypper_remove.stdout | default("")) | lower)
      failed_when: false

    # Limpiezas directas de rutas típicas
    - name: Eliminar carpeta config /etc/zabbix si existe
      ansible.builtin.file:
        path: /etc/zabbix
        state: absent
      ignore_errors: true

    - name: Eliminar carpeta datos /var/lib/zabbix si existe
      ansible.builtin.file:
        path: /var/lib/zabbix
        state: absent
      ignore_errors: true

    - name: Eliminar carpeta logs /var/log/zabbix si existe
      ansible.builtin.file:
        path: /var/log/zabbix
        state: absent
      ignore_errors: true

    # Búsqueda de carpetas 'zabbix' en rutas comunes (fallback)
    - name: Buscar carpetas llamadas 'zabbix' en rutas comunes
      ansible.builtin.find:
        paths: "{{ item }}"
        file_type: directory
        patterns: "zabbix"
        recurse: true
        follow: false
      loop: "{{ zabbix_common_paths }}"
      register: zabbix_dirs_found
      failed_when: false
      changed_when: false

    - name: Consolidar rutas encontradas
      ansible.builtin.set_fact:
        zabbix_dirs_all: "{{ (zabbix_dirs_all | default([])) + (item.files | map(attribute='path') | list) }}"
      loop: "{{ zabbix_dirs_found.results | default([]) }}"
      when: item.matched | default(0) | int > 0

    - name: Eliminar todas las carpetas 'zabbix' encontradas
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zabbix_dirs_all | default([]) }}"
      when: (zabbix_dirs_all | default([])) | length > 0
      ignore_errors: true

    - name: Aviso si no se encontró ninguna carpeta 'zabbix' extra
      ansible.builtin.debug:
        msg: "No se encontraron carpetas adicionales llamadas 'zabbix' fuera de las rutas comunes."
      when: (zabbix_dirs_all | default([])) | length == 0

    
        - name: Desinstalar paquetes SNMP (net-snmp)
          package:
            name:
              - net-snmp
              - snmpd
            state: absent

        - name: Detener y deshabilitar servicio snmpd si existe
          service:
            name: snmpd
            state: stopped
            enabled: no
          ignore_errors: yes

        - name: Cerrar puerto 161/udp en firewalld
          ansible.builtin.firewalld:
            port: 161/udp
            permanent: true
            state: disabled
            immediate: true
          when: ansible_facts['os_family'] == "RedHat"

        - name: Cerrar puerto 161/udp en ufw
          ansible.builtin.ufw:
            rule: deny
            port: "161"
            proto: udp
          when: ansible_facts['os_family'] == "Debian"


    # --- Post-check ---
    - name: Verificar que paquetes SNMP ya no estén instalados
      command: rpm -q net-snmp snmpd
      register: snmp_rpm_check
      failed_when: false
      changed_when: false
      when: ansible_facts['os_family'] == "RedHat"

    - name: Mostrar resultado de verificación de paquetes (RedHat)
      debug:
        msg: "{{ snmp_rpm_check.stdout_lines }}"
      when: ansible_facts['os_family'] == "RedHat"

    - name: Verificar que paquetes SNMP ya no estén instalados (Debian/Ubuntu)
      command: dpkg -l | grep -E 'snmp|net-snmp'
      register: snmp_dpkg_check
      failed_when: false
      changed_when: false
      when: ansible_facts['os_family'] == "Debian"

    - name: Mostrar resultado de verificación de paquetes (Debian/Ubuntu)
      debug:
        msg: "{{ snmp_dpkg_check.stdout_lines }}"
      when: ansible_facts['os_family'] == "Debian"

    - name: Verificar estado del puerto 161/udp
      command: ss -lun | grep ':161'
      register: snmp_port_check
      failed_when: false
      changed_when: false

    - name: Mostrar evidencia del puerto 161/udp
      debug:
        msg: "{{ snmp_port_check.stdout_lines | default('Puerto 161/udp no detectado (correcto)') }}"
