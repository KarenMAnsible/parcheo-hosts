---
- name: Validación de estado del sistema Windows
  hosts: Windows
  gather_facts: no
  vars:
    ruta_log: "C:\\VikoLogs\\validacion_log.txt"
  tasks:

    - name: Crear carpeta de logs si no existe
      win_file:
        path: "C:\\VikoLogs"
        state: directory

    - name: Obtener información del sistema
      win_shell: |
        [PSCustomObject]@{
          hostname = $env:COMPUTERNAME
          os_name = (Get-CimInstance Win32_OperatingSystem).Caption
          os_version = (Get-CimInstance Win32_OperatingSystem).Version
        } | ConvertTo-Json
      register: sistema_raw

    - name: Parsear info del sistema
      set_fact:
        sistema: "{{ sistema_raw.stdout | from_json }}"

    - name: Obtener servicios detenidos
      win_shell: |
        Get-Service | Where-Object { $_.Status -eq 'Stopped' } | Select-Object Name, Status | ConvertTo-Json
      register: servicios_det_raw

    - name: Parsear servicios detenidos
      set_fact:
        servicios_det: "{{ servicios_det_raw.stdout | from_json | default([]) }}"

    - name: Obtener espacio en disco
      win_shell: |
        Get-PSDrive -PSProvider 'FileSystem' | Select-Object Name, @{Name='Total';Expression={[math]::round($_.Used + $_.Free / 1GB,2)}}, @{Name='Free';Expression={[math]::round($_.Free / 1GB,2)}}, @{Name='Used';Expression={[math]::round($_.Used / 1GB,2)}} | ConvertTo-Json
      register: disco_raw

    - name: Parsear espacio en disco
      set_fact:
        espacio_disco: >
          {{ disco_raw.stdout | from_json | map('combine', {
            'drive': attribute('Name'),
            'total': attribute('Total') ~ ' GB',
            'free': attribute('Free') ~ ' GB',
            'used': attribute('Used') ~ ' GB'
          }) | list }}

    - name: Registrar fecha y hora actual
      set_fact:
        fecha_hora: "{{ lookup('pipe', 'date /T && time /T') }}"

    - name: Crear log formateado
      win_template:
        src: templates/validacion_log.j2
        dest: "{{ ruta_log }}"
        force: true
