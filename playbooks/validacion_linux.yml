---
- name: Validación de servidor Linux
  hosts: linux
  gather_facts: true
  become: true

  vars:
    # Ruta del log en TEXTO PLANO (se sobrescribe en cada ejecución)
    log_path: "/var/log/ansible/validacion_linux.log"

    # Servicios a verificar
    services_to_check:
      - sshd
      - cron
      - rsyslog

  tasks:
    - name: Asegurar carpeta del log
      ansible.builtin.file:
        path: "{{ log_path | dirname }}"
        state: directory
        mode: "0755"

    - name: Uptime legible
      ansible.builtin.shell: "uptime"
      register: uptime
      changed_when: false

    - name: Último arranque
      ansible.builtin.shell: "who -b | awk '{print $3\" \"$4}'"
      register: last_boot
      changed_when: false

    - name: Memoria (free -h)
      ansible.builtin.command: "free -h"
      register: mem
      changed_when: false

    - name: Discos (df -h)
      ansible.builtin.command: "df -h"
      register: disks
      changed_when: false

    - name: Estado de servicios (systemd)
      ansible.builtin.shell: "systemctl is-active {{ item }}"
      loop: "{{ services_to_check }}"
      register: svc_status
      failed_when: false
      changed_when: false

    # === BLOQUE DE PARCHES / UPDATES ===
    - name: Aplicar parches del sistema (según distro)
      block:
        # SUSE / SLES (sin módulo, usando shell)
        - name: SLES | Actualizar todo con zypper (shell)
          ansible.builtin.shell: |
            zypper refresh && zypper update -y
          args:
            warn: false
          when: ansible_facts.os_family | lower == 'suse'
          register: zypper_out
          changed_when: "'Nothing to do' not in (zypper_out.stdout | default('') ~ zypper_out.stderr | default(''))"

        # Debian/Ubuntu
        - name: Debian/Ubuntu | Update cache
          ansible.builtin.apt:
            update_cache: yes
          when: ansible_facts.os_family | lower == 'debian'

        - name: Debian/Ubuntu | Dist-upgrade + autoremove
          ansible.builtin.apt:
            upgrade: dist
            autoremove: yes
          when: ansible_facts.os_family | lower == 'debian'
          register: apt_upgrade

        # RHEL/CentOS/Rocky/Alma
        - name: RedHat-like | Actualizar todo
          ansible.builtin.yum:
            name: '*'
            state: latest
            update_cache: yes
          when: ansible_facts.os_family | lower == 'redhat'
          register: yum_update

      rescue:
        - name: Guardar error de parchado
          ansible.builtin.set_fact:
            patch_error: "{{ ansible_failed_result.msg | default('Error al aplicar parches') }}"

      always:
        - name: Resumen de parchado
          ansible.builtin.set_fact:
            patch_summary: >-
              {% if patch_error is defined %}
              FALLÓ: {{ patch_error }}
              {% elif (zypper_out is defined and zypper_out.changed)
                   or (apt_upgrade is defined and apt_upgrade.changed)
                   or (yum_update is defined and yum_update.changed) %}
              OK: se aplicaron actualizaciones
              {% else %}
              Sin cambios: ya estaba al día
              {% endif %}

    # === LOG ===
    - name: Construir contenido del log (texto plano)
      ansible.builtin.set_fact:
        log_content: |-
          === Validación Linux ===
          Host: {{ ansible_facts.fqdn | default(inventory_hostname) }} ({{ inventory_hostname }})
          Fecha: {{ ansible_date_time.date }} {{ ansible_date_time.time }}
          SO: {{ ansible_distribution }} {{ ansible_distribution_version }} (Kernel {{ ansible_kernel }})

          [Estado]
          Uptime: {{ uptime.stdout }}
          Último arranque: {{ last_boot.stdout | default('N/D') }}
          Carga 1/5/15: {{ ansible_facts.loadavg['1'] | default(uptime.stdout.split()[-3], true) }} {{ ansible_facts.loadavg['5'] | default(uptime.stdout.split()[-2], true) }} {{ ansible_facts.loadavg['15'] | default(uptime.stdout.split()[-1], true) }}
          CPU (vCPUs): {{ ansible_facts.processor_vcpus | default('N/D') }}
          Memoria total: {{ ansible_facts.memtotal_mb | default('N/D') }} MB
          Parcheo: {{ patch_summary | default('N/D') }}

          [Memoria]
          {{ mem.stdout }}

          [Discos]
          {{ disks.stdout }}

          [Servicios]
          {% for r in svc_status.results %}
          - {{ r.item }}: {{ 'OK' if r.rc == 0 else 'FALLA' }}
          {% endfor %}

    - name: Escribir log en {{ log_path }}
      ansible.builtin.copy:
        dest: "{{ log_path }}"
        content: "{{ log_content }}"
        mode: "0644"
