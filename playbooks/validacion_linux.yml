- name: Validación de servidor Linux
  hosts: linux
  gather_facts: yes
  become: yes

  vars:
    log_path: /var/log/ansible/validacion_linux.log
    services_to_check:
      - sshd
      - cron
      - rsyslog

  pre_tasks:
    - name: Asegurar carpeta del log
      file:
        path: "{{ log_path | dirname }}"
        state: directory
        mode: "0755"

    - name: Encabezado del log
      copy:
        dest: "{{ log_path }}"
        mode: "0644"
        content: |
          === Validación Linux ===
          Host: {{ inventory_hostname }} ({{ ansible_hostname }})
          Fecha: {{ ansible_date_time.iso8601 }}
          SO: {{ ansible_distribution }} {{ ansible_distribution_version }} (Kernel {{ ansible_kernel }})

          [Estado]

    - name: Uptime legible
      shell: uptime
      register: uptime_out
      changed_when: false

    - name: Último arranque
      shell: who -b | awk '{print $3,$4}'
      register: last_boot
      changed_when: false

    - name: Carga promedio
      shell: awk '{print $1,$2,$3}' /proc/loadavg
      register: load_avg
      changed_when: false

    - name: CPU vCPUs
      set_fact:
        vcpus_count: "{{ ansible_processor_vcpus | default(ansible_processor_count) | default('N/A') }}"
      changed_when: false

    - name: Memoria total (GiB)
      set_fact:
        mem_total_gib: "{{ (ansible_memtotal_mb | float / 1024) | round(1) }} GiB"
      changed_when: false

    - name: Escribir estado base al log
      lineinfile:
        path: "{{ log_path }}"
        line: |
          Uptime: {{ uptime_out.stdout }}
          Último arranque: {{ last_boot.stdout | default('N/D') }}
          Carga 1/5/15: {{ load_avg.stdout }}
          CPU (vCPUs): {{ vcpus_count }}
          Memoria total: {{ mem_total_gib }}
        create: yes

    - name: Memoria (free -h)
      shell: free -h
      register: free_out
      changed_when: false

    - name: Discos (df -h)
      shell: df -h
      register: df_out
      changed_when: false

    - name: Estado de servicios (systemd)
      shell: "systemctl is-active {{ item }}"
      register: svc_states
      changed_when: false
      failed_when: false
      loop: "{{ services_to_check }}"

    - name: Escribir bloque Memoria/Discos/Servicios
      blockinfile:
        path: "{{ log_path }}"
        marker: ""
        block: |
          [Memoria]
          {{ free_out.stdout }}

          [Discos]
          {{ df_out.stdout }}

          [Servicios]
          {% for r in svc_states.results %}
          - {{ r.item }}: {{ 'OK' if r.stdout == 'active' else r.stdout | upper }}
          {% endfor %}

  tasks:
    #######################################################################
    # PARCHEO POR DISTRIBUCIÓN + CAPTURA DE DETALLE DE PAQUETES
    #######################################################################

    # --- SLES / openSUSE ---
    - name: SLES | Actualizar todo con zypper
      shell: |
        set -o pipefail
        zypper refresh && zypper update -y
      args:
        executable: /bin/bash
      register: zypper_out
      changed_when: "'Nothing to do.' not in zypper_out.stdout"
      failed_when: false
      when: ansible_facts['os_family'] == 'Suse'

    - name: SLES | Guardar detalle de zypper en el log
      blockinfile:
        path: "{{ log_path }}"
        marker: ""
        block: |
          [Parcheo - SLES/zypper]
          {{ (zypper_out.stdout | default('')) | trim }}
          {{ ('\nSTDERR:\n' ~ zypper_out.stderr) if (zypper_out.stderr | default('')) else '' }}
      when: ansible_facts['os_family'] == 'Suse'

    # --- Debian/Ubuntu ---
    - name: Debian/Ubuntu | Update cache
      apt:
        update_cache: yes
      register: apt_cache
      when: ansible_facts['os_family'] == 'Debian'

    - name: Debian/Ubuntu | Dist-upgrade + autoremove
      apt:
        upgrade: dist
        autoremove: yes
      register: apt_upgrade
      when: ansible_facts['os_family'] == 'Debian'

    - name: Debian/Ubuntu | Capturar history de APT (últimas entradas)
      shell: |
        set -o pipefail
        grep -A3 '^Start-Date:' /var/log/apt/history.log | tail -n 200
      args:
        executable: /bin/bash
      register: apt_hist
      changed_when: false
      failed_when: false
      when: ansible_facts['os_family'] == 'Debian'

    - name: Debian/Ubuntu | Guardar detalle en el log
      blockinfile:
        path: "{{ log_path }}"
        marker: ""
        block: |
          [Parcheo - Debian/Ubuntu]
          Cambios: {{ 'Sí' if apt_upgrade.changed else 'No' }}
          {{ apt_hist.stdout | default('Sin entradas relevantes en /var/log/apt/history.log') }}
      when: ansible_facts['os_family'] == 'Debian'

    # --- RedHat / CentOS / Rocky / Alma ---
    - name: RedHat-like | Actualizar todo (últimas versiones)
      yum:
        name: "*"
        state: latest
      register: yum_upd
      when: ansible_facts['os_family'] == 'RedHat'

    - name: RedHat-like | Capturar historial (paquetes alterados)
      shell: |
        set -o pipefail
        (command -v dnf >/dev/null 2>&1 && dnf -y history info last) || yum -y history info last
      args:
        executable: /bin/bash
      register: yum_hist
      changed_when: false
      failed_when: false
      when: ansible_facts['os_family'] == 'RedHat'

    - name: RedHat-like | Guardar
