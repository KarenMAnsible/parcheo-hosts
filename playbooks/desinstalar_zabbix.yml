---
- name: Desinstalar Zabbix (Windows y Linux) con verificación
  hosts: a_desinstalar_zabbix
  gather_facts: true
  become: true

  vars:
    # Si queda algún rastro y quieres que el job falle, déjalo en true
    enforce_clean: true

    # Paquetes por familia Linux
    zbx_linux_pkg_patterns:
      Debian: ["zabbix-agent", "zabbix-agent2"]
      RedHat: ["zabbix-agent", "zabbix-agent2"]
      Suse:   ["zabbix-agent", "zabbix-agent2"]

    # Servicios típicos en Linux
    zbx_service_names: ["zabbix-agent", "zabbix-agent2"]

    # Rutas de limpieza
    zbx_dirs_linux:
      - /etc/zabbix
      - /var/log/zabbix
      - /var/lib/zabbix
    zbx_dirs_windows:
      - 'C:\Program Files\Zabbix Agent'
      - 'C:\Program Files\Zabbix Agent 2'
      - 'C:\zabbix'

    # Repos conocidos
    zbx_repo_files_apt:
      - /etc/apt/sources.list.d/zabbix.list
      - /etc/apt/sources.list.d/zabbix-official.list
    zbx_repo_files_yum:
      - /etc/yum.repos.d/zabbix.repo
    zbx_repo_files_zypper:
      - /etc/zypp/repos.d/zabbix.repo

  tasks:
    # =========================
    # DETECCIÓN DE SO
    # =========================
    - name: Detectar si es Windows
    # En Windows, os_family varía; usamos system para asegurarlo
      set_fact:
        is_windows: true
      when: ansible_facts.system | lower == "windows"

    - name: Detectar familia Linux (Debian/RedHat/Suse)
      set_fact:
        linux_family: "{{ ansible_facts.os_family }}"
      when: ansible_facts.os_family in ["Debian", "RedHat", "Suse"]

    # =========================
    # WINDOWS
    # =========================
    - name: WINDOWS | Detener servicio Zabbix Agent si existe
      ansible.windows.win_service:
        name: "{{ item }}"
        state: stopped
      loop:
        - "Zabbix Agent"
        - "Zabbix Agent 2"
      ignore_errors: true
      when: is_windows | default(false)

    - name: WINDOWS | Desinstalar "Zabbix Agent" si está instalado
      ansible.windows.win_package:
        name: Zabbix Agent
        state: absent
      ignore_errors: true
      when: is_windows | default(false)

    - name: WINDOWS | Desinstalar "Zabbix Agent 2" si está instalado
      ansible.windows.win_package:
        name: Zabbix Agent 2
        state: absent
      ignore_errors: true
      when: is_windows | default(false)

    - name: WINDOWS | Borrar carpetas residuales
      ansible.windows.win_file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zbx_dirs_windows }}"
      ignore_errors: true
      when: is_windows | default(false)

    # =========================
    # LINUX
    # =========================
    - name: LINUX | Detener y deshabilitar servicios Zabbix (si existen)
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop: "{{ zbx_service_names }}"
      ignore_errors: true
      when: linux_family is defined

    - name: LINUX | Desinstalar paquetes Zabbix (Debian/Ubuntu)
      ansible.builtin.apt:
        name: "{{ zbx_linux_pkg_patterns['Debian'] }}"
        state: absent
        purge: yes
        update_cache: yes
      when: linux_family == "Debian"

    - name: LINUX | Desinstalar paquetes Zabbix (RHEL/CentOS/Alma/Rocky)
      ansible.builtin.dnf:
        name: "{{ zbx_linux_pkg_patterns['RedHat'] }}"
        state: absent
      when: linux_family == "RedHat"

    - name: LINUX | Desinstalar paquetes Zabbix (SUSE)
      community.general.zypper:
        name: "{{ zbx_linux_pkg_patterns['Suse'] }}"
        state: absent
      when: linux_family == "Suse"

    - name: LINUX | Eliminar archivos de configuración y datos
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zbx_dirs_linux }}"
      ignore_errors: true
      when: linux_family is defined

    - name: LINUX | Remover repos de Zabbix (APT)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zbx_repo_files_apt }}"
      when: linux_family == "Debian"
      ignore_errors: true

    - name: LINUX | Remover repos de Zabbix (YUM/DNF)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zbx_repo_files_yum }}"
      when: linux_family == "RedHat"
      ignore_errors: true

    - name: LINUX | Remover repos de Zabbix (ZYPPER)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ zbx_repo_files_zypper }}"
      when: linux_family == "Suse"
      ignore_errors: true

    - name: LINUX | Limpiar caché de paquetes
      ansible.builtin.shell: |
        if command -v apt-get >/dev/null 2>&1; then apt-get clean;
        elif command -v dnf >/dev/null 2>&1; then dnf clean all;
        elif command -v yum >/dev/null 2>&1; then yum clean all;
        elif command -v zypper >/dev/null 2>&1; then zypper clean -a;
        fi
      args:
        warn: false
      changed_when: false
      when: linux_family is defined

    # =========================
    # VERIFICACIÓN FINAL
    # =========================
    - name: LINUX | Verificar que no haya paquetes Zabbix instalados
      ansible.builtin.shell: |
        if command -v dpkg >/dev/null 2>&1; then dpkg -l | grep -iE '^ii\s+zabbix-agent' || true;
        elif command -v rpm >/dev/null 2>&1; then rpm -qa | grep -iE '^zabbix-agent' || true;
        fi
      register: zbx_check_linux
      changed_when: false
      when: linux_family is defined

    - name: WINDOWS | Obtener lista de paquetes instalados
      ansible.windows.win_package_facts:
      register: win_pkgs
      when: is_windows | default(false)

    - name: WINDOWS | Construir lista de restos (Zabbix Agent/Agent 2)
      set_fact:
        win_zbx_remnants: >-
          {{ (win_pkgs.installed_packages | default([]))
              | selectattr('name','search','(?i)Zabbix Agent( 2)?')
              | list }}
      when: is_windows | default(false)

    - name: LINUX | Marcar estado de limpieza
      set_fact:
        linux_clean: "{{ (zbx_check_linux.stdout | default('') | trim) == '' }}"
      when: linux_family is defined

    - name: WINDOWS | Marcar estado de limpieza
      set_fact:
        windows_clean: "{{ (win_zbx_remnants | default([])) | length == 0 }}"
      when: is_windows | default(false)

    - name: Determinar estado global de limpieza por host
      set_fact:
        zabbix_clean: >-
          {{ (linux_family is defined and (linux_clean | default(false))) or
             (is_windows | default(false) and (windows_clean | default(false))) }}

    - name: Resumen de verificación
      ansible.builtin.debug:
        msg: |
          >>> VERIFICACIÓN DE DESINSTALACIÓN <<<
          SO: {{ ansible_facts.system }} / {{ ansible_facts.os_family | default('N/A') }}
          Linux paquetes remanentes: "{{ zbx_check_linux.stdout | default('N/A') | trim }}"
          Windows paquetes remanentes: {{ (win_zbx_remnants | default([])) | map(attribute='name') | list }}
          Estado final: {{ 'LIMPIO ✅' if zabbix_clean else 'PENDIENTE ❌' }}

    - name: Fallar si se detectan restos (opcional)
      ansible.builtin.assert:
        that:
          - not enforce_clean or zabbix_clean
        fail_msg: "Se detectaron restos de Zabbix tras la desinstalación."
        success_msg: "Desinstalación verificada correctamente."
